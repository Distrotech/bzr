#!/usr/bin/env python2.4
from itertools import izip
from StringIO import StringIO
import sys
import time

from bzrlib.tuned_gzip import GzipFile
from bzrlib.workingtree import WorkingTree

from multiparent import MultiVersionedFile
single_parent = False
if len(sys.argv) > 1 and len(sys.argv) < 4:
    wt, path = WorkingTree.open_containing(sys.argv[-1])
    if len(sys.argv) == 3:
        assert sys.argv[1] == '--single'
        single_parent = True
else:
    print >> sys.stderr, 'Usage: mpknit [--single] FILENAME'
    sys.exit(3)

bt = wt.branch.repository.revision_tree(wt.last_revision())
file_id = wt.path2id(path)
file_weave = wt.branch.repository.get_inventory_weave()
#file_weave = bt.get_weave(file_id)
#file_weave.enable_cache()
vf = MultiVersionedFile(25)
ft_set = set(r for r in file_weave.versions() if
             file_weave._index.get_method(r) == 'fulltext')
vf.import_versionedfile(file_weave)
print >> sys.stderr, file_weave
print >> sys.stderr, "%d fulltexts" % len(ft_set)
print >> sys.stderr, "%d snapshots" % len(vf._snapshots)
vf.clear_cache()
if False:
    for revision_id in file_weave.get_ancestry(
        [bt.inventory[file_id].revision]):
        if vf.get_line_list([revision_id])[0] != \
            file_weave.get_lines(revision_id):
            open(revision_id + '.old', 'wb').writelines(
                file_weave.get_lines(revision_id))
            open(revision_id + '.new', 'wb').writelines(
                vf.get_line_list(revision_id)[0])
if True:
    revisions = file_weave.get_ancestry(
            [bt.inventory[file_id].revision])[-1:]
    from bzrlib.lsprof import profile
    ret, stats = profile(vf.get_line_list, revisions)
    stats.sort()
    stats.pprint()
    start = time.clock()
    print revisions
    for x in range(1000):
        vf.clear_cache()
        vf.get_line_list(revisions)
    print time.clock() - start
    start = time.clock()
    for x in range(1000):
        file_weave.get_line_list(revisions)
    print time.clock() - start
if False:
    revisions = file_weave.versions()

    for revision, diff in vf._diffs.iteritems():
        sio = StringIO()
        data_file = GzipFile(None, mode='wb', fileobj=sio)
        print >> data_file, 'version %s' % revision
        data_file.writelines(diff.to_patch())
        data_file.close()
        sys.stdout.write(sio.getvalue())
