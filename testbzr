#! /usr/bin/python

# Copyright (C) 2005 Canonical Ltd

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


"""External black-box test for bzr.

This always runs bzr as an external process to try to catch bugs
related to argument processing, startup, etc.

This replaces the previous test.sh which was not very portable."""

import sys, os, traceback

try:
    import shutil
    from subprocess import call, Popen, PIPE
except ImportError, e:
    sys.stderr.write("testbzr: sorry, this test suite requires modules from python2.4\n"
                     + '    ' + str(e))
    sys.exit(1)


class CommandFailed(Exception):
    pass


def formcmd(cmd):
    if isinstance(cmd, basestring):
        logfile.write('$ %s\n' % cmd)
        cmd = cmd.split()
    else:
        logfile.write('$ %r\n' % cmd)

    return cmd


def runcmd(cmd, retcode=0):
    """Run one command and check the return code.

    Returns a tuple of (stdout,stderr) strings.

    If a single string is based, it is split into words.
    For commands that are not simple space-separated words, please
    pass a list instead."""
    cmd = formcmd(cmd)
    log_linenumber()
    
    actual_retcode = call(cmd, stdout=logfile, stderr=logfile)
    
    if retcode != actual_retcode:
        raise CommandFailed("test failed: %r returned %d, expected %d"
                            % (cmd, actual_retcode, retcode))



def backtick(cmd, retcode=0):
    cmd = formcmd(cmd)
    log_linenumber()
    child = Popen(cmd, stdout=PIPE, stderr=logfile)
    outd, errd = child.communicate()
    logfile.write(outd)
    actual_retcode = child.wait()
    
    if retcode != actual_retcode:
        raise CommandFailed("test failed: %r returned %d, expected %d"
                            % (cmd, actual_retcode, retcode))

    return outd



def progress(msg):
    print '* ' + msg
    logfile.write('* '+ msg + '\n')
    log_linenumber()


def cd(dirname):
    logfile.write('$ cd %s\n' % dirname)
    os.chdir(dirname)



def log_linenumber():
    """Log the stack frame location two things up."""
    stack = traceback.extract_stack()[-3]
    logfile.write('   at %s:%d\n' % stack[:2])


TESTDIR = "testbzr.tmp"

# prepare an empty scratch directory
if os.path.exists(TESTDIR):
    shutil.rmtree(TESTDIR)


logfile = open('testbzr.log', 'wt', buffering=1)


try:
    runcmd(['mkdir', TESTDIR])
    cd(TESTDIR)

    progress("introductory commands")
    runcmd("bzr version")
    runcmd("bzr help")
    runcmd("bzr --help")

    progress("user identity")
    # this should always identify something, if only "john@localhost"
    runcmd("bzr whoami")
    runcmd("bzr whoami --email")
    assert backtick("bzr whoami --email").count('@') == 1

    progress("invalid commands")
    runcmd("bzr pants", retcode=1)
    runcmd("bzr --pants off", retcode=1)

    progress("basic branch creation")
    runcmd(['mkdir', 'branch1'])
    cd('branch1')
    runcmd('bzr init')

    progress("status of new file")
    
    f = file('test.txt', 'wt')
    f.write('hello world!\n')
    f.close()

    out = backtick("bzr unknowns").rstrip('\r\n')
    assert out == 'test.txt'

    out = backtick("bzr status").replace('\r', '')
    assert out == '''?       test.txt\n'''

    out = backtick("bzr status --all").replace('\r', '')
    assert out == "?       test.txt\n"

    progress("adding a file")

    runcmd("bzr add test.txt")
    assert backtick("bzr unknowns") == ''
    assert backtick("bzr status --all").replace('\r', '') == "A       test.txt\n"

    cd('..')

    progress("all tests passed!")
except Exception, e:
    sys.stderr.write('*' * 50 + '\n'
                     + 'testbzr: tests failed\n'
                     + 'see testbzr.log for more information\n'
                     + '*' * 50 + '\n')
    logfile.write('tests failed!\n')
    traceback.print_exc(None, logfile)
    sys.exit(1)
